plugins {
    id 'java'
    id 'application'
    id "org.beryx.jlink" version "2.25.0"
}

group = 'net.brlns'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'net.brlns.gdownloader.GDownloader'
    mainModule = 'net.brlns.gdownloader'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.github.kwhat:jnativehook:2.2.2'
    implementation 'org.slf4j:slf4j-api:2.0.13'
    implementation 'org.slf4j:slf4j-simple:2.0.13'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    //TODO cannot compile ImageIO WebM support at all, not supported by java 21
    //runtimeOnly 'com.github.usefulness:webp-imageio:0.8.0'
    //implementation 'com.twelvemonkeys.imageio:imageio-webp:3.11.0'
    implementation 'org.jsoup:jsoup:1.18.1'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all,-serial,-processing,-missing-explicit-ctor']
}

jar {
    manifest {
        attributes (
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Gabriel D @hstr0100',
            'Main-Class': application.mainClass
        )
    }

    //from {
    //    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    //}

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'GDownloader'
        jvmArgs = ['-Xmx2G']
        noConsole = true
    }

    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()

        jvmArgs = ['-Djnativehook.lib.locator=net.brlns.gdownloader.util.CustomNativeLocator']

        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        icon = "src/main/resources/assets/launcher/GDownloader.$imgType"

        installerOptions += [
            '--about-url', 'https://github.com/hstr0100/GDownloader',
            '--description', 'Download Manager',
            '--vendor', 'Gabriel D @hstr0100',
            '--copyright', '2024 Gabriel D @hstr0100',
            '--license-file', 'LICENSE',
            '--app-version', version
        ]

        if (currentOs.windows) {
            installerName = 'GDownloader-Installer'
            installerType = 'msi'
            //imageOptions += ['--win-console']
            installerOptions += [
                '--win-per-user-install',
                '--win-dir-chooser',
                '--win-menu',
                '--win-shortcut'
            ]
        } else if (currentOs.linux) {
            installerType = 'deb'
            installerOptions += [
                '--resource-dir', 'build/jpackage/GDownloader/lib/app',
                '--linux-package-name', 'gdownloader',
                '--linux-app-category', 'Qt;KDE;Internet;',
                '--linux-menu-group', 'Qt;KDE;Internet;',
                '--linux-deb-maintainer', 'hstr0100@brlns.net',
                '--linux-rpm-license-type', 'GPLv3',
                '--linux-shortcut'
            ]
        } else if (currentOs.macOsX) {
            installerType = 'dmg'
            installerOptions += [
                '--mac-package-name', 'GDownloader'
            ]
        }
    }
}

tasks.jpackage.doFirst {
    def currentOs = org.gradle.internal.os.OperatingSystem.current()
    def basePath = currentOs.windows ? project.name : currentOs.linux ? "$project.name/lib" : "${project.name}.app/Contents"

    copy {
        from('src/main/resources/assets/launcher')
        include "GDownloader.png"
        include "GDownloader.icns"
        include "GDownloader.ico"
        into("$buildDir/jpackage/$basePath/app")
    }
}

configurations {
    resolvableImplementation { extendsFrom implementation }
}

tasks.jlink.doLast {
    configurations.resolvableImplementation.files.findAll { f ->
        f.name.contains "jnativehook"
    }.each { nativeJar ->
        def destDir = file("$imageDir/bin/native-libs")
        delete destDir
        mkdir destDir

        def baseLibPath = 'com/github/kwhat/jnativehook/lib'
        def zt = zipTree(nativeJar).matching {
            include "$baseLibPath/**"
        }

        def expandedPath = zt.asFileTree.tree.mirror.dir.path
        zt.files.each { f ->
            def pathInLib = (f.path - expandedPath).substring(1)
            pathInLib = pathInLib.replace('\\', '/')
            pathInLib -= "$baseLibPath/"
            def destFilePath = destDir.toPath().resolve(pathInLib)
            mkdir destFilePath.parent
            java.nio.file.Files.copy(f.toPath(), destFilePath)
        }
    }
}
