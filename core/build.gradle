plugins {
    id 'java'
    id 'application'
    id 'org.beryx.jlink' version "$beryxPluginVersion"
    id 'com.github.johnrengelman.shadow' version "$shadowPluginVersion"
    id 'org.gradlex.extra-java-module-info' version "$extraModuleInfoPluginVersion"
}

version = rootProject.version
group = 'net.brlns'

def author = 'Gabriel D @hstr0100'
def lowercaseName = 'gdownloader'

def os = org.gradle.internal.os.OperatingSystem.current()

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

	modularity.inferModulePath = true
}

application {
    mainClass = 'net.brlns.gdownloader.GDownloader'
    mainModule = 'net.brlns.gdownloader'
    applicationDefaultJvmArgs = ['--add-exports=java.management/sun.management=ALL-UNNAMED']
}

dependencies {
    implementation project(path: ":twelvemonkeys", configuration: "moduleJar")
    implementation "com.github.kwhat:jnativehook:$jnativehookVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.slf4j:slf4j-simple:$slf4jVersion"
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "org.jsoup:jsoup:$jsoupVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$jupiterVersion"
}

test {
    useJUnitPlatform()
}

extraJavaModuleInfo {
    failOnMissingModuleInfo = true

    module("twelvemonkeys-$twelvemonkeysVersion-all.jar", 'com.twelvemonkeys.imageio') {
        requiresStatic 'java.desktop'

        exports 'com.twelvemonkeys.imageio.stream'
        exports 'com.twelvemonkeys.imageio.color'
        exports 'com.twelvemonkeys.imageio.plugins.jpeg'
        exports 'com.twelvemonkeys.imageio.plugins.webp'
        exports 'com.twelvemonkeys.imageio.plugins.tiff'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:all,-serial,-processing,-missing-explicit-ctor']
}

jar {
    archiveBaseName.set("${lowercaseName}-java")

    manifest {
        attributes(
            'Implementation-Title': rootProject.name,
            'Implementation-Version': version,
            'Implementation-Vendor': author,
            'Main-Class': application.mainClass.get()
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    archiveBaseName.set("${lowercaseName}-java")
    mergeServiceFiles()
}

//Workaround for https://github.com/gradle/gradle/issues/26155 and https://github.com/johnrengelman/shadow/issues/882
tasks.named('shadowJar') { shadowJar ->
    inputs.files(project.configurations.runtimeClasspath)
    configurations = []

    doFirst {
        configurations = [project.configurations.runtimeClasspath]
    }
}

task zipJpackageImage(type: Zip) {
    def architecture = System.getProperty("os.arch").contains("64") ? (os.isWindows() ? "x64" : "amd64") : (os.isWindows() ? "x86" : "i386")

    def fileName = os.isWindows() ? "gdownloader-${version}-windows_portable_${architecture}.zip" :
                   os.isLinux() ? "gdownloader-${version}-linux_portable_${architecture}.zip" :
                   "gdownloader-${version}-mac_portable.zip"

    archiveFileName.set(fileName)
    destinationDirectory.set(file("$buildDir/jpackage"))

    //A less-than-stellar but functional way to detect that the program is running in portable mode.
    doFirst {
        def basePath = os.isWindows() ? "$buildDir/jpackage/${rootProject.name}" :
                       os.isLinux() ? "$buildDir/jpackage/${rootProject.name}/lib" :
                       "$buildDir/jpackage/${rootProject.name}.app/Contents"

        def portableLockFile = file("$basePath/runtime/portable.lock")
        portableLockFile.text = "This file ensures that the program will run in portable mode.\nDeleting it when the program is not installed is not recommended."
    }

    from("$buildDir/jpackage/${rootProject.name}")
}

tasks.jpackage.finalizedBy zipJpackageImage

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'GDownloader'
        jvmArgs = ['-Xmx2G']
        noConsole = true
    }

    jpackage {
        jvmArgs = ['-Djnativehook.lib.locator=net.brlns.gdownloader.util.CustomNativeLocator']

        def imgType = os.isWindows() ? 'ico' : os.isMacOsX() ? 'icns' : 'png'
        icon = "src/main/resources/assets/launcher/GDownloader.$imgType"

        installerOptions += [
            '--about-url', 'https://github.com/hstr0100/GDownloader',
            '--description', 'Download Manager',
            '--vendor', author,
            '--copyright', "2024 ${author}",
            '--license-file', "../LICENSE",
            '--app-version', version
        ]

        //For now lets just assume Windows for arm is not a thing yet
        def architecture = System.getProperty("os.arch").contains("64") ? "x64" : "x86"

        if (os.isWindows()) {
            installerName = "${lowercaseName}-windows-${architecture}"
            installerType = 'msi'
            //imageOptions += ['--win-console']
            installerOptions += [
                '--win-per-user-install',
                '--win-dir-chooser',
                '--win-menu',
                '--win-menu-group', "${rootProject.name}",
                '--win-shortcut'
            ]
        } else if (os.isLinux()) {
            //AppImage not yet supported by jpackage
            installerType = 'deb'
            installerOptions += [
                '--resource-dir', "build/jpackage/${rootProject.name}/lib/app",
                '--linux-package-name', "${lowercaseName}-linux",
                '--linux-app-category', 'web',
                '--linux-menu-group', 'Network;',
                '--linux-deb-maintainer', 'brokenlensllc@gmail.com',
                '--linux-rpm-license-type', 'GPLv3',
                '--linux-shortcut'
            ]
        } else if (os.isMacOsX()) {
            installerType = 'dmg'
            installerOptions += [
                '--mac-package-name', "${lowercaseName}-mac"
            ]
        }
    }
}

tasks.jpackage.doFirst {
    def basePath = os.isWindows() ? rootProject.name : os.isLinux() ? "${rootProject.name}/lib" : "${rootProject.name}.app/Contents"

    copy {
        from('src/main/resources/assets/launcher')
        include "GDownloader.png"
        include "GDownloader.icns"
        include "GDownloader.ico"
        into("$buildDir/jpackage/$basePath/app")
    }
}

configurations {
    resolvableImplementation { extendsFrom implementation }
}

tasks.jlink.doLast {
    configurations.resolvableImplementation.files.findAll { f ->
        f.name.contains "jnativehook"
    }.each { nativeJar ->
        def destDir = file("$imageDir/bin/native-libs")
        delete(destDir)
        mkdir(destDir)

        def baseLibPath = 'com/github/kwhat/jnativehook/lib'
        def zt = zipTree(nativeJar).matching {
            include "$baseLibPath/**"
        }

        def expandedPath = zt.asFileTree.tree.mirror.dir.path
        zt.files.each { f ->
            def pathInLib = (f.path - expandedPath).substring(1)
            pathInLib = pathInLib.replace('\\', '/')
            pathInLib -= "$baseLibPath/"
            def destFilePath = destDir.toPath().resolve(pathInLib)
            mkdir(destFilePath.parent)
            java.nio.file.Files.copy(f.toPath(), destFilePath)
        }
    }
}
